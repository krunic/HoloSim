/*
 * HoloSim, visualization and control of the moxel based environment.
 *
 * Copyright (C) 2010 Veljko Krunic
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef TRIANGLE_BY_POINT_INDEX_H_
#define TRIANGLE_BY_POINT_INDEX_H_

namespace hdsim {
   
   class TriangleByPointIndexes {

	public:
   	~TriangleByPointIndexes() {}
   
	   void setIndexes(int index1, int index2, int index3) {
   	   index1_ = index1;
      	index2_ = index2;
	      index3_ = index3;
   	}
   
	   void setIndex1(int index1) {
   	   index1_ = index1;
	   }
   
	   void setIndex2(int index2) {
   	   index2_ = index2;
	   }

	   void setIndex3(int index3) {
   	   index3_ = index3;
	   }
   
   
	   int getIndex1() const {
      	return index1_;
   	}
   
   	int getIndex2() const {
	      return index2_;
	   }
   
	   int getIndex3() const {
   	   return index3_;
	   }
   
	   friend TriangleByPointIndexes createTriangle(int index1, int index2, int index3);
      
      friend bool operator==(const TriangleByPointIndexes &lhs, const TriangleByPointIndexes &rhs);
      friend bool operator!=(const TriangleByPointIndexes &lhs, const TriangleByPointIndexes &rhs);
      
      TriangleByPointIndexes(const TriangleByPointIndexes &rhs) : index1_(rhs.index1_), index2_(rhs.index2_), index3_(rhs.index3_) {}
      
      TriangleByPointIndexes &operator=(const TriangleByPointIndexes &rhs) {
         
         if (&rhs == this)
            return *this;
         
         index1_ = rhs.index1_;
         index2_ = rhs.index2_;
         index3_ = rhs.index3_;         
         
         return *this;
      }     
   
	private:
   
   	// Autogenerated copy constructor and operator= would work just fine, but we need to prevent inheritance of this flyweight
	   TriangleByPointIndexes(int index1, int index2, int index3) : index1_(index1), index2_(index2), index3_(index3) {}
   
		int index1_, index2_, index3_;
   
	};
   
   inline bool operator==(const TriangleByPointIndexes &lhs, const TriangleByPointIndexes &rhs) {
      return lhs.index1_ == rhs.index1_  &&  lhs.index2_ == rhs.index2_  &&  lhs.index3_ == rhs.index3_;
   }
   
   inline bool operator!=(const TriangleByPointIndexes &lhs, const TriangleByPointIndexes &rhs)  {
      return !(lhs == rhs);
   }  

   inline TriangleByPointIndexes createTriangle(int index1, int index2, int index3) {
      return TriangleByPointIndexes(index1, index2, index3);
   }
}

#endif
